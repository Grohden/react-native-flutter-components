import type { Brightness, Color } from '@lib/std-ui';

type ColorSchemeArgs = {
  brightness: Brightness;
  primary: Color;
  onPrimary: Color;
  primaryContainer?: Color;
  onPrimaryContainer?: Color;
  secondary: Color;
  onSecondary: Color;
  secondaryContainer?: Color;
  onSecondaryContainer?: Color;
  tertiary?: Color;
  onTertiary?: Color;
  tertiaryContainer?: Color;
  onTertiaryContainer?: Color;
  error: Color;
  onError: Color;
  errorContainer?: Color;
  onErrorContainer?: Color;
  background: Color;
  onBackground: Color;
  surface: Color;
  onSurface: Color;
  surfaceVariant?: Color;
  onSurfaceVariant?: Color;
  outline?: Color;
  outlineVariant?: Color;
  shadow?: Color;
  scrim?: Color;
  inverseSurface?: Color;
  onInverseSurface?: Color;
  inversePrimary?: Color;
  surfaceTint?: Color;
};

export class ColorScheme {
  // if only js supported named arguments :/
  readonly brightness: Brightness;
  readonly primary: Color;
  readonly onPrimary: Color;
  readonly primaryContainer?: Color;
  readonly onPrimaryContainer?: Color;
  readonly secondary: Color;
  readonly onSecondary: Color;
  readonly secondaryContainer?: Color;
  readonly onSecondaryContainer?: Color;
  readonly tertiary?: Color;
  readonly onTertiary?: Color;
  readonly tertiaryContainer?: Color;
  readonly onTertiaryContainer?: Color;
  readonly error: Color;
  readonly onError: Color;
  readonly errorContainer?: Color;
  readonly onErrorContainer?: Color;
  readonly background: Color;
  readonly onBackground: Color;
  readonly surface: Color;
  readonly onSurface: Color;
  readonly surfaceVariant?: Color;
  readonly onSurfaceVariant?: Color;
  readonly outline?: Color;
  readonly outlineVariant?: Color;
  readonly shadow?: Color;
  readonly scrim?: Color;
  readonly inverseSurface?: Color;
  readonly onInverseSurface?: Color;
  readonly inversePrimary?: Color;
  readonly surfaceTint?: Color;

  constructor(props: ColorSchemeArgs) {
    this.brightness = props.brightness;
    this.primary = props.primary;
    this.onPrimary = props.onPrimary;
    this.primaryContainer = props.primaryContainer;
    this.onPrimaryContainer = props.onPrimaryContainer;
    this.secondary = props.secondary;
    this.onSecondary = props.onSecondary;
    this.secondaryContainer = props.secondaryContainer;
    this.onSecondaryContainer = props.onSecondaryContainer;
    this.tertiary = props.tertiary;
    this.onTertiary = props.onTertiary;
    this.tertiaryContainer = props.tertiaryContainer;
    this.onTertiaryContainer = props.onTertiaryContainer;
    this.error = props.error;
    this.onError = props.onError;
    this.errorContainer = props.errorContainer;
    this.onErrorContainer = props.onErrorContainer;
    this.background = props.background;
    this.onBackground = props.onBackground;
    this.surface = props.surface;
    this.onSurface = props.onSurface;
    this.surfaceVariant = props.surfaceVariant;
    this.onSurfaceVariant = props.onSurfaceVariant;
    this.outline = props.outline;
    this.outlineVariant = props.outlineVariant;
    this.shadow = props.shadow;
    this.scrim = props.scrim;
    this.inverseSurface = props.inverseSurface;
    this.onInverseSurface = props.onInverseSurface;
    this.inversePrimary = props.inversePrimary;
    this.surfaceTint = props.surfaceTint;
  }
}
